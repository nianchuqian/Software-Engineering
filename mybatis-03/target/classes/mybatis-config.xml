<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--核心配置文件-->
<configuration>
    <!--    引入外部配置文件-->
    <properties resource="db.properties">

    </properties>

    <settings>
        <!--        STDOUT_LOGGING标准日志工厂实现-->
        <setting name="logImpl" value="STDOUT_LOGGING"></setting>
        <!--        Log4j
        通过使用Log4j，可以控制日志信息输送的目的地是控制台、文件、还是GUI组建，甚至是网站
        可以控制每一条日志的输出格式
        通过定义每一条日志信息的级别，能够更加细致的控制日志的生成过程
        可以通过配置文件进行灵活的配置，而不需要修改代码
        -->
        <!--        配置log4j为日志的实现-->
        <setting name="logImpl" value="LOG4J"></setting>
    </settings>

    <!--    取别名，可以给实体类起别名-->
    <typeAliases>
        <!--        方式一：直接为实体类创建一个别名，实体类少时建议使用-->
        <!--        <typeAlias type="pojo.User" alias="User"></typeAlias>-->
        <!--        指定一个包名，MyBatis会在包名下搜索需要的Java Bean-->
        <!--        比如扫描实体类的包，它的默认别名就为这个类的类名的首字母小写，实体类多时建议使用，
                    可以使用注解@Alias("别名")（放在实体类类名的前面）实现自定义-->
        <package name="pojo"></package>
    </typeAliases>

    <environments default="development">
        <environment id="development">
            <!--            事务管理器-->
            <transactionManager type="JDBC"/>
            <!--            数据源-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="root"/>
                <property name="password" value="xzx123456"/>
            </dataSource>
        </environment>
    </environments>

    <!--    映射器：注册绑定Mapper文件-->
    <!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册-->
    <mappers>
        <!--        方式一：使用相对路径的资源引用-->
        <mapper resource="dao/UserMapper.xml"/>

        <!--        方式二：使用class文件绑定注册，映射器接口实现类的完全限定类名
                           使用注意点：①接口和他的Mapper配置文件必须同名②接口和他的Mapper配置文件必须在同一个包下-->
        <!--        <mapper class="dao.UserMapper"></mapper>-->

        <!--        方式三：将包内的映射器接口实现全部注册为映射器,使用扫描包进行注册绑定，注意点同上-->
        <!--        <package name="dao"></package>-->
    </mappers>
</configuration>